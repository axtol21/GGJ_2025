using UnityEngine;
using UnityEditor;

/// <summary>
/// Generated by ChatGPT: https://chatgpt.com/share/67947451-9314-8002-9fdf-352fe8bf914b
/// </summary>
[CustomEditor(typeof(LevelManager))]
public class LevelManagerEditor : Editor
{
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();

        if (GUILayout.Button("Start Level"))
        {
            LevelManager.StartLevel();
        }
    }
}

/// <summary>
/// Generated by ChatGPT: https://chatgpt.com/share/679470b5-5eb0-8002-b8c4-041fcd53453a
/// </summary>
[CustomPropertyDrawer(typeof(LevelStep))]
public class LevelStepDrawer : PropertyDrawer
{
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
    {
        EditorGUI.BeginProperty(position, label, property);

        // Get properties
        SerializedProperty timeProp = property.FindPropertyRelative("time");
        SerializedProperty levelEventProp = property.FindPropertyRelative("levelEvent");

        // Define column widths (make time column smaller)
        float timeColumnWidth = position.width * 0.2f; // 30% of the width for the time column
        float levelEventColumnWidth = position.width * 0.8f; // 70% for the levelEvent column
        float spacing = 5f; // Spacing between columns

        // Draw time field
        Rect timeRect = new Rect(position.x, position.y, timeColumnWidth - spacing, EditorGUIUtility.singleLineHeight);
        EditorGUI.PropertyField(timeRect, timeProp, GUIContent.none);

        // Draw level event field
        Rect levelEventRect = new Rect(position.x + timeColumnWidth + spacing, position.y, levelEventColumnWidth - spacing, EditorGUIUtility.singleLineHeight);
        EditorGUI.PropertyField(levelEventRect, levelEventProp, GUIContent.none);

        EditorGUI.EndProperty();
    }

    public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
    {
        return EditorGUIUtility.singleLineHeight;
    }
}